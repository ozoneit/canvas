<div id="uploading_please_wait_dialog" title="Uploading, Please Wait." style="display:none;">
  <div id="uploading_progressbar"></div>
  <p>Uploading and processing your zip file, if there are a lot of files in the zip file or it is very large, this may take a while.</p>
</div>
<% form_for((@zfi || ZipFileImport.new), :url => context_url(@context, :context_zip_file_imports_url), :html => { :id => "zip_file_import_form", :multipart => true })  do |form| %>
  <input type="hidden" name="batch_id" value="<%= AutoHandle.generate(@current_user.asset_string, 10) %>" id="zip_import_batch_id"/>
  <%= form.error_messages %>
  <div>
    <input type="file" name="zip_file" id="zip_file"/><br/>
    <span style="font-size: 0.8em; color: #a00; display: none;" id="zip_only_message">Please select a .zip file for uploading</span>
  </div>
  <div id="upload_to" style="margin: 10px 0;">
    Upload to:
    <select name="folder_id">
      <%= render :partial => 'shared/folder_option', :collection => Folder.root_folders(@context), :locals => {:folders => @context.folders.active, :selected_folder_id => params[:folder_id].to_i} %>
    </select>
    <%= hidden_field_tag 'return_to', qti_or_content_link %>
  </div>
  <div class="button-container">
    <button type="submit" class="submit_button button big-button">Upload File</button>
    <a class="cancel_button button button-secondary" href="#">Cancel</a>
  </div>
  <a href="<%= context_url(@context, :import_status_context_zip_file_imports_url) %>" class="zip_file_import_status_url" style="display: none;">&nbsp;</a>
<% end %>
<% js_block do %>
<script>
  $(document).ready(function() {
    $("#zip_file_import_form #zip_file").change(function() {
      var val = $(this).val();
      if(val && !val.match(/\.zip$/)) {
        $("#zip_only_message").show();
        $("#upload_form .submit_button").attr('disabled', true);
      } else {
        $("#zip_only_message").hide();
        $("#upload_form .submit_button").attr('disabled', false);
      }
    }).change();
    $("#uploading_progressbar").progressbar();
    $("#zip_file_import_form").submit(function(){
      $("#uploading_please_wait_dialog").dialog('close').dialog({
        bgiframe: true,
        width: 400,
        modal: true,
        autoOpen: false,
        closeOnEscape: false,
        dialogClass: "ui-dialog-no-close-button"
      }).dialog('open');
      return true;
    });
    var $frame = $("<iframe id='import_frame' name='import_frame'/>")
    $("body").append($frame.hide());
    $("#zip_file_import_form").attr('target', 'import_frame');
    $("#zip_file_import_form").submit(function() {
      $("#uploading_progressbar").progressbar('value', 0);
      var id = $("#zip_import_batch_id").val();
      var url = $(".zip_file_import_status_url").attr('href') + "?batch_id=" + id;
      $("#zip_file_import_form .errors").hide();
      var importFailed = function(errors) {
        var $div = $("<div class='errors' style='color: #a00; font-weight: bold;'/>");
        $div.text("There were some errors extracting the zip file.  Please try again");
        $.flashError("There were some errors extracting the zip file.  Please try again");
        $("#zip_import_batch_id").val($("#zip_import_batch_id").val() + "0");
        var $ul = $("<ul class='errors'/>");
        for(var idx in errors) {
          var error = errors[idx];
          var $li = $("<li/>");
          $li.text(error);
          $ul.append($li);
        }
        $("#zip_file_import_form .errors").hide();
        $("#zip_file_import_form").prepend($ul).prepend($div);
        $("#uploading_please_wait_dialog").dialog('close');
      }
      var hadSomeProgress = false;
      var pollImport = function() {
        $.getJSON(url, function(data) {
          if(data && data.errors) {
            importFailed(data.errors);
          } else if(data && data.complete) {
            $("#uploading_progressbar").progressbar('value', 100);
            $("#uploading_please_wait_dialog").prepend("Uploading complete!");
            location.href = $("#return_to").val();
          } else if(hadSomeProgress && (!data || data.progress == null)) {
            pollImport.blankCount = pollImport.blankCount || 0;
            pollImport.blankCount++;
            if(pollImport.blankCount > 10) {
              importFailed(["The server stopped returning a valid status"]);
            } else {
              setTimeout(pollImport, 2000);
            }
          } else {
            pollImport.errorCount = 0;
            pollImport.blankCount = 0;
            hadSomeProgress = true;
            setTimeout(pollImport, 2000);
            $("#uploading_progressbar").progressbar('value', ((data.progress || 0) * 100));
          }
        }, function() {
          pollImport.errorCount = pollImport.errorCount || 0;
          pollImport.errorCount++;
          if(pollImport.errorCount > 10) {
            importFailed(["The server stopped responding to status requests"]);
          } else {
            setTimeout(pollImport, 2000);
          }
        });
      };
      setTimeout(pollImport, 5000);
    });
  });
</script>
<% end %>
